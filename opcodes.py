from enum import Enum, auto

class _Enum(Enum):
    def _generate_next_value_(name, start, count, last_values):
        name = name.lower().replace('__', '/').replace('_', '-')
        return (name, count + 1,)

class Opcode(_Enum):
    NOP = auto()
    MOVE = auto()
    MOVE__FROM = auto()
    MOVE__16 = auto()
    MOVE_OBJECT = auto()
    MOVE_WIDE = auto()
    MOVE_WIDE__FROM16 = auto()
    MOVE_WIDE__16 = auto()
    MOVE_OBJECT__FROM16 = auto()
    MOVE_OBJECT__16 = auto()
    MOVE_RESULT = auto()
    MOVE_RESULT_WIDE = auto()
    MOVE_RESULT_OBJECT = auto()
    MOVE_EXCEPTION = auto()
    RETURN_VOID = auto()
    RETURN = auto()
    RETURN_WIDE = auto()
    RETURN_OBJECT = auto()
    CONST__4 = auto()
    CONST__16 = auto()
    CONST = auto()
    CONST__HIGH16 = auto()
    CONST_WIDE__16 = auto()
    CONST_WIDE__32 = auto()
    CONST_WIDE = auto()
    CONST_WIDE__HIGH16 = auto()
    CONST_STRING = auto()
    CONST_STRING_JUMBO = auto()
    CONST_CLASS = auto()
    MONITOR_ENTER = auto()
    MONITOR_EXIT = auto()
    CHECK_CAST = auto()
    INSTANCE_OF = auto()
    ARRAY_LENGTH = auto()
    NEW_INSTANCE = auto()
    NEW_ARRAY = auto()
    FILLED_NEW_ARRAY_RANGE = auto()
    FILLED_ARRAY_DATA = auto()
    THROW = auto()
    GOTO = auto()
    GOTO__16 = auto()
    GOTO__32 = auto()
    PACKED_SWITCH = auto()
    SPARSE_SWITCH = auto()
    CMPL_FLOAT = auto()
    CMPG_FLOAT = auto()
    CMPL_DOUBLE = auto()
    CMPG_DOUBLE = auto()
    CMP_LONG = auto()
    IF_EQ = auto()
    IF_NE = auto()
    IF_LT = auto()
    IF_GE = auto()
    IF_GT = auto()
    IF_LE = auto()
    IF_EQZ = auto()
    IF_NEZ = auto()
    IF_LTZ = auto()
    IF_GTZ = auto()
    IF_LEZ = auto()
    UNUSED_3E = auto()
    UNUSED_3F = auto()
    UNUSED_40 = auto()
    UNUSED_41 = auto()
    UNUSED_42 = auto()
    UNUSED_43 = auto()
    AGET = auto()
    AGET_WIDE = auto()
    AGET_OBJECT = auto()
    AGET_BOOLEAN = auto()
    AGET_BYTE = auto()
    AGET_CHAR = auto()
    AGET_SHORT = auto()
    APUT = auto()
    APUT_OBJECT = auto()
    APUT_BOOLEAN = auto()
    APUT_BYTE = auto()
    APUT_CHAR = auto()
    APUT_SHORT = auto()
    IGET = auto()
    IGET_WIDE = auto()
    IGET_OBJECCT = auto()
    IGET_BOOLEAN = auto()
    IGET_BYTE = auto()
    IGET_CHAR = auto()
    IGET_SHORT = auto()
    IPUT = auto()
    IPUT_WIDE = auto()
    IPUT_OBJECT = auto()
    IPUT_BOOLEAN = auto()
    IPUT_BYTE = auto()
    IPUT_CHAR = auto()
    IPUT_SHORT = auto()
    SGET = auto()
    SGET_WIDE = auto()
    SGET_OBJECT = auto()
    SGET_BOOLEAN = auto()
    SGET_BYTE = auto()
    SGET_CHAR = auto()
    SGET_SHORT = auto()
    SPUT = auto()
    SPUT_WIDE = auto()
    SPUT_OBJECT = auto()
    SPUT_BOOLEAN = auto()
    SPUT_BYTE = auto()
    SPUT_CHAR = auto()
    SPUT_SHORT = auto()
    INVOKE_VIRTUAL = auto()
    INVOKE_SUPER = auto()
    INVOKE_DIRECT = auto()
    INVOKE_STATIC = auto()
    INVOKE_INTERFACE = auto()
    UNUSED_73 = auto()
    INVOKE_VIRTUAL__RANGE = auto()
    INVOKE_SUPER__RANGE = auto()
    INVOKE_DIRECT__RANGE = auto()
    INVOKE_STATIC__RANGE = auto()
    INVOKE_INTERFACE_RANGE = auto()
    UNUSED_79 = auto()
    UNUSED_7A = auto()
    NEG_INT = auto()
    NOT_INT = auto()
    NEG_LONG = auto()
    NOT_LONG = auto()
    NEG_FLOAT = auto()
    NEG_DOUBLE = auto()
    INT_TO_LONG = auto()
    INT_TO_FLOAT = auto()
    INT_TO_DOUBLE = auto()
    LONG_TO_INT = auto()
    LONG_TO_FLOAT = auto()
    LONG_TO_DOUBLE = auto()
    FLOAT_TO_INT = auto()
    FLOAT_TO_LONG = auto()
    FLOAT_TO_DOUBLE = auto()


    @property
    def lit(self):
        if self.name.startswith('UNUSED'):
            return None

        lit, _ = self.value
        return lit

