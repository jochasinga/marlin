// Smali grammar
//
// Panisuan Joe Chasinga <jo.chasinga@gmail.com>
//

?start : module

// module      : class_def class_body
module      : class_def
class_def   : class_header (_NEWLINE class_stmt)* class_body
class_body  : (_NEWLINE method_def)* [_NEWLINE]
?class_stmt : super_stmt
            | source_stmt
            | impl_stmt
            | field_stmt
            | anno_stmt

label : _COLON LABEL
class_header : _CLASS modifiers class_name
modifiers    : [(mod)* (acc_mod)*]
mod          : MOD
acc_mod      : ACC_MOD
class_name   : CLASS_NAME

// Class header statements
super_stmt : _SUPER base_class
?base_class : class_name

// Source statement
source_stmt : _SOURCE file_name
?file_name  : STRING

// Implementation statement
impl_stmt       : _IMPL interface_name
?interface_name : CLASS_NAME

method_stmt : op_stmt
            | dir_stmt
            | field_stmt
            | anno_stmt

// Annotation statement
anno_stmt   : anno_header _NEWLINE anno_body _NEWLINE _anno_end
anno_header : _ANNO _system class_name
_system      : SYSTEM
anno_body   : "value = {" [_NEWLINE] values [_NEWLINE] "}"
_anno_end   : _END _K_ANNO [_NEWLINE]
values      : [_value (_COMMA _value)*]
_value      : STRING
            | class_name

// Field statement
?field_stmt : (field_block | field_def)
field_def   : _FIELD modifiers symbol _COLON obj
symbol      : SYMBOL
obj         : OBJECT
field_block : field_def (_NEWLINE anno_stmt)* _field_end
_field_end  : _END _K_FIELD [_NEWLINE]

// Opcode statement
op_stmt : op_name (args)*
op_name : OPCODE_NAME
args : arg (_COMMA arg)*
arg  : label | VAR | OBJECT

// Directive statement
// .catch Ljava/security/NoSuchAlgorithmException; {:try_start_0 .. :try_end_0} :catch_1
// .catch Ljava/security/KeyStoreException; {:try_start_0 .. :try_end_0} :catch_0
dir_stmt: method_dir
method_dir : line_dir
           | catch_dir
           | anno_stmt
line_dir : directive [dir_arg]

directive : DIRECTIVE
dir_arg   : NUMBER

// Catch statement
catch_dir : _CATCH error "{" label ".." label "}" label
error : CLASS_NAME

// Method statement
method_def    : method_header method_body method_end
method_header : _D_METHOD [(mod)* (acc_mod)*] (constructor | method_name) method_sig
constructor : (_CON (INIT | CLINIT))
method_name : METHOD_NAME
method_sig  : _LPAREN method_args _RPAREN return_type
method_args : (method_arg)*
method_arg  : METHOD_ARG
method_body : (_NEWLINE (label | method_stmt))*
method_end  : _END _K_METHOD [_NEWLINE]
return_type : TYPE

SYMBOL        : /[a-z]+/
VAR           : /[pv][0-9]+/
SUBCLASS_NAME : /\$[A-Z][a-zA-Z0-9\_\-]/
CLASS_NAME    : /L[a-zA-Z0-9\_\-\/]+(SUBCLASS_NAME)*\;/
METHOD_NAME   : CNAME
PRIMITIVE     : "Z" | "B" | "S" | "C" | "I" | "J" | "F" | "D"
VOID          : "V"
OBJECT     : /\[*L[a-zA-Z0-9\_\-\$\/]+\;/
TYPE       : PRIMITIVE | VOID | OBJECT
METHOD_ARG : PRIMITIVE | OBJECT
COMMENT    : /#[^\n]*/
LABEL      : /(goto|try_start|try_end|catch|cond)(\_[0-9])*/
_NEWLINE   : (/\r?\n[\t ]*/ | COMMENT)+

//////////////////////////// Import /////////////////////////////

%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_NUMBER    -> NUMBER
%import common.CNAME
%import common.WS
%import .grammars.opcodes.NAME -> OPCODE_NAME
%import .grammars.terms.DOT
%import .grammars.terms.COMMA -> _COMMA
%import .grammars.terms.COLON -> _COLON
%import .grammars.terms.LPAREN -> _LPAREN
%import .grammars.terms.RPAREN -> _RPAREN

%import .grammars.keywords (MOD, ACC_MOD, INIT, CLINIT, SYSTEM)
%import .grammars.keywords.CON -> _CON
%import .grammars.keywords.METHOD -> _K_METHOD
%import .grammars.keywords.ANNO -> _K_ANNO
%import .grammars.keywords.FIELD -> _K_FIELD

%import .grammars.directives.LOCALS
%import .grammars.directives.FIELD -> _FIELD
%import .grammars.directives.IMPL -> _IMPL
%import .grammars.directives.SOURCE -> _SOURCE
%import .grammars.directives.SUPER -> _SUPER
%import .grammars.directives.CLASS -> _CLASS
%import .grammars.directives.ANNO -> _ANNO
%import .grammars.directives.METHOD -> _D_METHOD
%import .grammars.directives.END -> _END
%import .grammars.directives.CATCH -> _CATCH
%import .grammars.directives.DIRECTIVE

%ignore WS
%ignore COMMENT